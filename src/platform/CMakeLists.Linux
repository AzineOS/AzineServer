set (PLATFORM_PATH ${PLATFORM_ROOT}/posix)

add_definitions(-DPLATFORM_HEADER=\"${PLATFORM_PATH}/../platform.h\" -std=gnu11
	-Wall -Wno-missing-braces -Wno-unused-function -DCLOCK_SOURCE_RAW -DLUA_51
	-D__UNIX -D_POSIX_C_SOURCE -D_GNU_SOURCE)

message(" scanning for Linux specific libraries. ")

set (PLATFORM_SOURCES
	${PLATFORM_PATH}/mem.c
	${PLATFORM_PATH}/fmt_open.c
	${PLATFORM_PATH}/glob.c
	${PLATFORM_PATH}/map_resource.c
	${PLATFORM_PATH}/resource_io.c
	${PLATFORM_PATH}/strip_traverse.c
	${PLATFORM_PATH}/paths.c
	${PLATFORM_PATH}/appl.c
	${PLATFORM_PATH}/sem.c
	${PLATFORM_PATH}/base64.c
	${PLATFORM_PATH}/time.c
	${PLATFORM_PATH}/warning.c
	${PLATFORM_PATH}/frameserver.c
	${PLATFORM_PATH}/fsrv_guard.c
	${PLATFORM_PATH}/fdpassing.c
	${PLATFORM_PATH}/namespace.c
	${PLATFORM_PATH}/launch.c
)

#
# Either investigate more OS native approaches to get LED
# controller access, or find a hid- api that doesn't
# require UDev
#
if (ENABLE_LED)
	FIND_PACKAGE(UDev REQUIRED)

	LIST(APPEND MAIN_LIBRARIES ${UDEV_LIBRARIES})
	LIST(APPEND PLATFORM_SOURCES
		${CMAKE_EXTERNAL_SRCDIR}/hidapi/hid_linux.c
		${CMAKE_EXTERNAL_SRCDIR}/hidapi/hidapi.h
	)
endif()

set (FSRV_PLATFORM_SOURCES
	${PLATFORM_PATH}/warning.c
	${PLATFORM_PATH}/time.c
	${PLATFORM_PATH}/sem.c
	${PLATFORM_PATH}/base64.c
	${PLATFORM_PATH}/mem.c
	${PLATFORM_PATH}/fdpassing.c
	${SHMIF_SOURCES}
)

set (LWA_PLATFORM_SOURCES
	${PLATFORM_SOURCES}
	${SHMIF_SOURCES}
	${PLATFORM_PATH}/../arcan/video.c
)

# we don't want these coming along in LWA_PLATFORM
LIST(APPEND PLATFORM_SOURCES
	${PLATFORM_ROOT}/${VIDEO_PLATFORM}/video.c
	${PLATFORM_ROOT}/${INPUT_PLATFORM}/event.c
)

SET(HIJACK_SOURCES
	hijack/arcan_target_unix.c
	hijack/arcan_target.c
	${SHMIF_SOURCES}
	frameserver/ntsc/snes_ntsc.c
 	frameserver/resampler/resample.c
)

set (
 FSRV_SOURCES
	${SHMIF_SOURCES}
)

LIST(APPEND FSRV_SOURCES frameserver/frameserver.c)
LIST(APPEND STDLIB
 rt
 dl)
include(${PLATFORM_ROOT}/CMakeLists.fsrv)

#
# For LWA support, we default to a different video platform as all
# we need is a headless (possibly unaccelerated if paranoid) way of rendering
# GL into the shared memory buffer.
#
# (to get GL up and running) and substitute the shmif for input/audio
# Audio is managed by building / linking a special AL-soft with a
# backend that uses the shmif.
#
if (ENABLE_LWA)
	message("LWA support enabled, video backend (EGL/X11, hardcoded)")
	add_executable(arcan_lwa
		${SOURCES}
		${LWA_PLATFORM_SOURCES}
	)

	set_property(TARGET arcan_lwa APPEND PROPERTY
		COMPILE_DEFINITIONS HEADLESS_PLATFORM=\"${LWA_HEADLESS}\")
endif()

add_library(arcan_hijack SHARED ${HIJACK_SOURCES})

set_property(TARGET arcan_hijack APPEND PROPERTY
	COMPILE_DEFINITIONS ENABLE_X11HIJACK ENABLE_WINE_HIJACK)

target_link_libraries(arcan_hijack
	${SDL_LIBRARY}
	${AGP_LIBRARIES}
	${STDLIB}
)
set(BIN_DST ${CMAKE_INSTALL_PREFIX}/bin)
set(APPL_DST ${CMAKE_INSTALL_PREFIX}/share/arcan/appl)
set(RESOURCES_DST ${CMAKE_INSTALL_PREFIX}/share/arcan/resources)

add_executable( arcan ${SOURCES} ${PLATFORM_SOURCES} )
set_property(TARGET arcan APPEND PROPERTY COMPILE_DEFINITIONS ${ARCAN_DEFINITIONS})

install(TARGETS arcan_hijack DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)

if (ENABLE_32BITHIJACK)
	message("(*) 64-bit target detected, building compat. 32-bit hijack library")

	add_library(arcan_hijack32 SHARED ${HIJACK_SOURCES})

	set_property(TARGET arcan_hijack32 APPEND PROPERTY
		COMPILE_FLAGS "-m32")
	set_property(TARGET arcan_hijack32 APPEND PROPERTY
		COMPILE_DEFINITIONS ENABLE_X11HIJACK ENABLE_WINE_HIJACK)
	 	target_link_libraries(arcan_hijack32 ${STDLIB} -m32 )
	install(TARGETS arcan_hijack32 DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
endif (ENABLE_32BITHIJACK)

# install(FILES ${CMAKE_SOURCE_DIR}/utils/arcan_romman.rb DESTINATION ${BIN_DST}
# 	PERMISSIONS
#		WORLD_READ WORLD_EXECUTE
#		OWNER_WRITE OWNER_READ OWNER_EXECUTE
#		GROUP_READ GROUP_EXECUTE
#)

#
# can we add a separate install targument for dev-man?
# or better yet, add to /usr/share/doc/arcan/man and hint at
# setting an alias to get the manpage support.
#
# same with vim highlights
#

install(FILES ${CMAKE_SOURCE_DIR}/../doc/arcan.1
	DESTINATION /usr/local/share/man/man1
)

