set (PLATFORM_PATH ${CMAKE_SOURCE_DIR}/platform/posix)

set (PLATFORM_SOURCES
${PLATFORM_PATH}/fmt_open.c
${PLATFORM_PATH}/glob.c
${PLATFORM_PATH}/map_resource.c
${PLATFORM_PATH}/resource_io.c
${PLATFORM_PATH}/ilaunch.c
${PLATFORM_PATH}/strip_traverse.c
${PLATFORM_PATH}/paths.c
${PLATFORM_PATH}/sem.c
${PLATFORM_PATH}/shm.c
${PLATFORM_PATH}/time.c
${PLATFORM_PATH}/warning.c
${PLATFORM_PATH}/../sdl/event.c
${PLATFORM_PATH}/../sdl/video.c
)

set (FSERV_PLATFORM_SOURCES
${PLATFORM_PATH}/warning.c
${PLATFORM_PATH}/time.c
${PLATFORM_PATH}/sem.c
${PLATFORM_PATH}/shm.c
${PLATFORM_PATH}/../stub/event.c
)

if (${ENABLE_LIBRETRO})
if (${ENABLE_LIBRETRO3D})
	list(APPEND FSRV_SOURCES ${PLATFORM_PATH}/../sdl/video.c)
	list(APPEND FSRV_LIBRARIES ${SDL_LIBRARY})
	list(APPEND FSRV_LIBRARIES ${GLEW_LIBRARIES})
	list(APPEND FSRV_LIBRARIES ${OPENGL_gl_LIBRARY})
endif(${ENABLE_LIBRETRO3D})
endif(${ENABLE_LIBRETRO})

add_definitions(-DPLATFORM_HEADER="platform/posix/platform.h" 
	-Wall -Wno-missing-braces -DCLOCK_SOURCE_RAW -DLUA_51 -D__UNIX
	-D_POSIX_C_SOURCE -D_GNU_SOURCE)

# find_program(GENERATE_TAGS ctags)
#if (GENERATE_TAGS)
#	message("--> ctags command found, generating tags output")
#	set_source_files_properties( ctags.output PROPERTIES GENERATED true )
#	add_custom_command( OUTPUT ctags.output
#		COMMAND ctags -R --fields=+iaS --extra=+q -o ctags.output .
#		WORKING_DIRECTORY ${CMAKE_SOURCE_DIR} )
#	LIST(APPEND SOURCES ctags.output)
#endif (GENERATE_TAGS)

LIST(APPEND SOURCES 
	${CMAKE_EXTERNAL_SRCDIR}/hidapi/hid_linux.c
	${CMAKE_EXTERNAL_SRCDIR}/hidapi/hidapi.h
 	arcan_target_launcher.c 
	arcan_frameserver_backend_unix.c
)
LIST(APPEND SOURCES ${PLATFORM_SOURCES})

LIST(APPEND MAIN_LIBRARIES m rt udev) 
LIST(APPEND FSRV_SOURCES frameserver/frameserver.c 
	${FSERV_PLATFORM_SOURCES})

LIST(APPEND FSRV_LIBRARIES rt m dl)

add_library(arcan_hijack SHARED 
	arcan_target_unix.c
	arcan_target.c	
	arcan_event.c 
	arcan_frameserver_shmpage.c 
	frameserver/ntsc/snes_ntsc.c
 	frameserver/resampler/resample.c
)

set_property(TARGET arcan_hijack PROPERTY 
	COMPILE_DEFINITIONS ENABLE_X11HIJACK ENABLE_WINE_HIJACK)

target_link_libraries(arcan_hijack ${SDL_LIBRARY} ${OPENGL_gl_LIBRARY})

set(BIN_DST ${CMAKE_INSTALL_PREFIX}/bin)
set(THEME_DST ${CMAKE_INSTALL_PREFIX}/share/arcan/themes)
set(RESOURCES_DST ${CMAKE_INSTALL_PREFIX}/share/arcan/resources)

add_executable( arcan ${SOURCES} )
add_executable( arcan_frameserver ${FSRV_SOURCES})

install(TARGETS arcan_hijack DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)

if (ENABLE_32BITHIJACK)
	message("(*) 64-bit target detected, building compat. 32-bit hijack library")

	add_library(arcan_hijack32 SHARED 
		arcan_target_unix.c 
		arcan_event.c 
		arcan_frameserver_shmpage.c 
		frameserver/ntsc/snes_ntsc.c)
	
	set_target_properties(arcan_hijack32 PROPERTIES COMPILE_FLAGS "-m32")
 	target_link_libraries(arcan_hijack32 -m32 -lrt )
	install(TARGETS arcan_hijack32 DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
endif (ENABLE_32BITHIJACK)

install(FILES ${CMAKE_SOURCE_DIR}/utils/arcan_romman.rb DESTINATION ${BIN_DST} 
	PERMISSIONS 
		WORLD_READ WORLD_EXECUTE 
		OWNER_WRITE OWNER_READ OWNER_EXECUTE 
		GROUP_READ GROUP_EXECUTE
)

install(FILES ${CMAKE_SOURCE_DIR}/doc/arcan.1 
	DESTINATION /usr/local/share/man/man1
)

