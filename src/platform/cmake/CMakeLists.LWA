#
# Expects:
#  HEADLESS_PLATFORM (or FATAL)
#  PLATFORM_ROOT
#
# Defines:
#  arcan_lwa (new target executable)

# Lightweight arcan is a regular arcan build where we configure an
# audio/video/input platform that uses arcan-shmif rather than the
# regular platform configuration.
#
# To achieve this, we need special handling for audio, which is
# currently done by making a separate openal build where we patch
# in the code needed for this.
#
# When audio is refactored in the same platform/etc. structure as was
# done with video and agp, we'll have a soft- version with just basic
# resampling (already here) and basic mixing (already here) and get rid
# of the licensing pollution and overhead.
#
SET (ALPATCHES
	${EXTERNAL_SRC_DIR}/patches/openal/0001-adding-arcan-shmif-support.patch
	${EXTERNAL_SRC_DIR}/patches/openal/0002-arcan-shmif-backend-working.patch
)
get_property(ASHMIF_INT_LOC TARGET arcan_shmif_int PROPERTY LOCATION)
#
# Note the || echo "" on the PATCH_COMMAND line, it was added to have
# cmake IGNORE the return status of the git am command as when the patches
# have been applied the first time, they are erroneously added AGAIN IF you
# do a make clean && make.
#
ExternalProject_Add(openal_lwa
	SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/openal_lwa
	GIT_REPOSITORY "${EXTERNAL_SRC_DIR}/git/openal"
	${EXTERNAL_DEFS}
	${CMAKE_EXTERNAL_DEFS}
		-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
		-DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR}/lwa
    -DALSOFT_BACKEND_DSOUND=OFF
    -DALSOFT_BACKEND_MMDEVAPI=OFF
    -DALSOFT_BACKEND_JACK=OFF
    -DALSOFT_BACKEND_COREAUDIO=OFF
    -DALSOFT_BACKEND_OPENSL=OFF
		-DALSOFT_BACKEND_ALSA=OFF
		-DALSOFT_BACKEND_OSS=OFF
		-DALSOFT_BACKEND_PULSEAUDIO=OFF
		-DALSOFT_BACKEND_PORTAUDIO=OFF
		-DALSOFT_BACKEND_SOLARIS=OFF
		-DALSOFT_BACKEND_SNDIO=OFF
		-DALSOFT_BACKEND_QSA=OFF
		-DALSOFT_BACKEND_WAVE=OFF
		-DALSOFT_BACKEND_WINMM=OFF
		-DALSOFT_MIDI_FLUIDSYNTH=OFF
		-DALSOFT_BACKEND_ARCAN=ON
		-DALSOFT_REQUIRE_ARCAN=ON
		-DALSOFT_EXAMPLES=OFF
		-DALSOFT_DLOPEN=OFF
		-DALSOFT_UTILS=OFF
		-DALSOFT_CONFIG=OFF
		-DARCAN_SHMIF_LIB=${ASHMIF_INT_LOC}
		-DARCAN_SHMIF_PATH=${CMAKE_CURRENT_SOURCE_DIR}/shmif
)

ExternalProject_Get_Property(openal_lwa SOURCE_DIR)
ExternalProject_Get_Property(openal_lwa BINARY_DIR)

set(LWA_LIBRARIES
# is there a prettier way for specifying this?
	${CMAKE_CURRENT_BINARY_DIR}/lwa/lib/libopenal.a
)

set(LWA_INCLUDES
	${CMAKE_CURRENT_BINARY_DIR}/lwa/include/AL
	${INCLUDE_DIRS}
)

add_executable(arcan_lwa
	${SOURCES}
	${AGP_SOURCES}
	${LWA_PLATFORM}
	${PLATFORM_ROOT}/arcan/video.c
	${HEADLESS_SOURCES}
)

add_dependencies(arcan_lwa arcan_shmif_int openal_lwa)
if(STATIC_FREETYPE)
	add_dependencies(arcan_lwa Freetype)
endif()

target_compile_definitions(arcan_lwa PRIVATE
	ARCAN_LWA
	${ARCAN_DEFINITIONS}
	WITH_HEADLESS_MAIN
	HEADLESS_PLATFORM=\"${HEADLESS_PLATFORM}\"
)

if(STATIC_FREETYPE)
	add_dependencies(arcan_lwa Freetype)
endif()

add_dependencies(arcan_lwa openal_soft)

target_include_directories(arcan_lwa PRIVATE ${INCLUDE_DIRS})
target_link_libraries(arcan_lwa
	${STDLIB}
	${ARCAN_LIBRARIES}
	${AGP_LIBRARIES}
	${LWA_LIBRARIES}
	${HEADLESS_LIBRARIES}
	arcan_shmif_int
)

if (ARCAN_LNK_FLAGS)
set_property(TARGET arcan_lwa APPEND PROPERTY LINK_FLAGS ${ARCAN_LNK_FLAGS})
endif()

target_compile_definitions(arcan_lwa PRIVATE
	FRAMESERVER_MODESTRING=\"${FRAMESERVER_MODESTRING}\")

install(TARGETS arcan_lwa DESTINATION bin)
