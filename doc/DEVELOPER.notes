Some notes and hints for building / patching / packaging the engine as such.

[Targetted Platform]
 Language: C11 -- variable size member not at end of struct GNU extension accepted (due to linux CMSG format limitations) 

 System API: * POSIX2008 -- Linux extensions only allowed when there's no reasonable alternatives.
               win32/osx breakage workarounds should be split of into separate objects.
             
 Hardware:   * OpenGL 2.1 / GLES2.0 compatible acceleration, only RGBA8888 as texture format.

[All]
 * Remember to use the "default / standard" resources/themes when building packages, tools, resources, themes will be included in installation binaries as per the build system.
   This includes .lua scripts emitted as part of keyconf / ledconf etc.

 * Ruby1.8 or 1.9 (with nokogiri and sqlite3)
   needed for the romman tool, without which, the emulator frontend bits are fairly useless (although the engine as such may work)

[Win32]
 * This is the more difficult environment to setup and compile for. 
   Grab MinGW with MSYS, put the headers, .lib/.dll of all deps in relative win32/lib, win32/inc and win32/distr (dll- files to be included in package).
 * Launch the MinGW shell, enter the src dir and make sure to run CMake with the MSYS Generator (-G MSYS Makefiles) and the rest (make, make package) will hopefully just work ;-)
 * the arcan.rc.o (commited as binary) is simply from running windres.exe -i arcan.rc -o arcan.rc.o, current bugs with MSYS+CMake made the CMake support very hackish.
 * the romman.exe wrapper used by the installer script, is from a Ruby193 gem called "ocra" that merges scripts, runtime, gems (nokogiri / sqlite3) into one compressed exe ball.
   Do a c:\ruby193\bin\gem.exe install ocra and rebuild the package with c:\ruby193\bin\ruby.exe c:\ruby193\bin\ocra romman.rb romman_base.rb importers/* (dependency scanner isn't always spot on).
 * console trace messages are notoriously dodgy, use -1 arcan.stdout -2 arcan.stderr as command-line arguments as a work-around.

[OSX]
 * Apple seems gung-ho to alienate developers not subscribing to their wall-garden ideology,
   along with breaking basic stuff every new point release OSX isn't a prioritized target anymore. Should still work for 10.4/10.5, after that, game over.

 * Packaging on OSX is a bit of a pain, the current approach is (any CM guy, feel free to fix ;-))
   quite simply to build a package using the make package, will lack dependencies (dylibs and Frameworks). 
   The SDL stuff in particular is not included in a standard OSX installation.

   so to build a redistributable bundle,
   1. clear cmake cache, generate makefiles, patch cache- txt to point any /usr/local/lib stuff to be linked static. 
   2. make package.

[Linux]
 * Nothing really new or surprising here -- huge dependency-tree,
   ffmpeg (with libvpx, libx264, ...), 
   sdl1.2 (likely to be replaced with just EGL/KMS/devinput), 
   GLEW,
   sdl_image1.2 (optional, can survive with just libpng),
	 freetype2,
   openAL,
   openGL,
   libusb1.0,
   APR (apache portable runtime, for networking support)

