.\" groff -man -Tascii arcan.1
.TH arcan 1 "August 2015" arcan "User manual"
.SH NAME
Arcan \- Scriptable Multimedia Engine
.SH SYNOPSIS
.B arcan
.RI [ OPTIONS ]
.B applname
.RI [ APPLARGS ]

.SH DESCRIPTION
Arcan is a portable and fast self-sufficient multimedia engine for
advanced visualization and analysis work in a wide range of applications
e.g. game development, real-time streaming video, monitoring and
surveillance, up to and including desktop compositors and window managers.

.SH OPTIONS
.IP "\fB-h, --help\fR"
Show a brief summary of commands and usage.

.IP "\fB-w, --width\fR \fIpixels\fR"
Set the desired active canvas width. Setting this value to zero will let
the display driver chose based on connected displays. This can be overridden
by the running appl. This value will be cached/fetched from the database.

.IP "\fB-h, --height\fR \fIpixels\fR"
Set the desired active canvas height. Setting this value to zero will let
the display driver chose based on connected displays. This can be overridden
by the running appl. This value will be cached/fetched from the database.

.IP "\fB-f, --fullscreen\fR"
Fullscreen switch, the display driver will attempt to force the connected
display resolution to match the specified canvas dimensions.

.IP "\fB-m, --conservative\fR"
Toggle conservative memory management profile. The engine will store just
enough metadata to be able to reconstruct static data sources (e.g. most
textures, fonts etc.) should the display context need to be rebuilt.
Note that the behaviors of this option may vary radically depending on
video platform. Verify and Validate heavily when using conservative mode.

.IP "\fB-W, --sync-strat\fR \fIstrategy\fR"
Specify the synchronization strategy that the display driver should use
initially. These are dependent on the built-time configuration of
the engine and are listed at the end of running arcan with
the --help command-line argument.

.IP "\fB-M, --monitor\fR \fIrate\fR"
Enable monitoring mode, every \fIrate\fR ticks, save a snapshot of the
scripting engine state to a monitoring target (see -O, --monitor-out).

.IP "\fB-O, --monitor-out \fItarget\fR"
Defines the monitoring data recipient, used in combination with -M, --monitor.
Either specify LOG:filename for a text-based recipient or a valid
\fIappl\fR for launching two arcan sessions where the monitoring snapshots
are forwarded to the other instance for analysis and visualization.

.IP "\fB-q, --timedump \fIticks\fR"
After \fIticks\fR logical pulses, generate a snapshot similar to -M, --monitor
and store in LOGPATH namespace as \fItimedump\fR. This is triggered only once.

.IP "\fB-p, --rpath \fIpath\fR"
Change default searchpath for shared resources, see the \fInamespaces\fR
section below for additional details.

.IP "\fB-B, --binpath \fIpath\fR"
Specify the full path to the desired frameserver (e.g.
/usr/bin/arcan_frameserver) or to a prefix /path/to/prefix_ (decode, encode,
game, terminal, remoting).

.IP "\fB-t, --applpath \fIpath\fR"
Change default searchpath for applications, see the \fInamespaces\fR
section below for additional details.

.IP "\fB-H, --hook\fR" \fIscript\fR"
Specify a post-init (after running applname()) hook script that will be
loaded and executed. The script is expected to be specified relative to
the RESOURCEPATH namespace (APPL_SHARED) and is primarily intended for
debugging / testing / measurements. The execution of these scripts is
rather sensitive and troublesome to debug. Look in resources/scripts/hook
for examples.

.IP "\fB-b, --fallback \fIapplname\fR"
If the running application crashes due to scripting error or from misuse
of the API, all running external, \fIframeserver\fR, connections will be
transferred to \fIapplname\fR. If applname is set to the reserved value
:self the same appl will be used without running a verifyload cycle.

.IP "\fB-d, --database \fIdbname\fR"
Specify a different database for use when launching external targets and
as a key/value store for the running application, overriding the default
of HOMEDIR/.arcan/arcan.sqlite.

.IP "\fB-g, --debug\fR"
Increases debuglevel, more troubleshooting data will be sent to the standard
error and standard output nodes. The active debuglevel is also exposed to
scripts. This can be added multiple times for additional effect. Debuglevels
over 2 enabled engine features that change engine behavior and notably increases
verbosity.

.IP "\fB-V, --version\fR"
Print a version string to stdout and then terminate. This version string
can be used to identify the build, including audio, video, input
platforms and source code repository checkout id.

.IP "\fB-1, --pipe-stdout\fr"
This is only usable from an arcan_lwa instance. A requested connection point
is generated and written to stdin. This is supposed to be used with a normal
arcan instance running piped with -0 and act as a generic mechanism for
hooking up multiple arcan instances in a pipes-and-filters structure.

.IP "\fB-0, --pipe-stdin\fr"
See the description for 'pipe-stdin'. Reads a single line from stdin and tries
to open an external connection point with that name (assuming it passes normal
connection point validation).

.IP "\fB Unstable Arguments\fR"
These are slated to be replaced with a more flexible display configuration
system and will be changed in coming versions. Users should therefore take
precautions to make sure to notice when upgrading as not to break scripts
that depend on these features.

.IP "\fB-S, --nosound\fR"
Disable (silence) audio output.

.IP "\fB-s, --windowed\fR"
Set borderless, windowed display mode.

.IP "\fB-a, --multisamples\fR \fIsamples\fR"
Enable multisampling (MSAA), default: 4 samples. If MSAA setup fails,
the engine will silently revert to regular sampling.

There is also a range of possible environment variables for tuning options
related to the various input platforms. These are printed when you start
arcan with the --help argument and vary depending on how the engine was
compiled.

.SH NAMESPACES
There is a large assortment of namespaces that the engine will search for
when an appl requests read access to- or the creation of- a resource.
The way these are set up will vary depending on command-line arguments,
operating-system specific scans, if applname was specified as a
relative/absolute path and on a series of environment variables.

For a more detailed explanation on how this works from an appl perspective,
please refer to the developer documentation on the wiki.

This setup is rather complex in order to account for a large range of
platforms and use-cases, with the most simple configuration being an
application base folder (controlled with the \fB-t\fR command-line switch)
and a shared resource folder (Controlled with the \fB-p\fR switch).

The most important namespaces are the APPLBASE and the RESOURCEPATH.

Appls can manipulate (create, open, read, write) the files within
the confines of the \fBAPPLBASE/APPNAME\fR. Traversal (../) outside
this path will be blocked, but a user can explicitly map
(symlink, bind-mounts or similar) other paths into this namespace
and the engine will allow it.

Scripts gets read- access to resources within the \fBRESOURCEPATH\fR and
can explicitly request to search either or both namespaces when opening
a resource. By default, a namespace collision (the same resource existing
in multiple namespaces) gives priority to \fBAPPLBASE/APPNAME\fR.

The most fine-grained control can be obtained by setting a number of
environment variables:

.IP "\fBARCAN_RESOURCEPATH\fR\"
Shared resources, as described above.

.IP "\fBARCAN_APPLTEMPPATH\fR\"
Used when there is a need to split the folder that an appl can use as a
writable (delete, create, update) backing store. By default, this is resolved
to the same folder as the appl is - but can be unmapped to prevent an appl from
killing or modifying itself.

.IP "\fBARCAN_APPLBASEPATH\fR\"
This path is used to search for appls but may be ignored for absolute
paths specified on the command-line.

.IP "\fBARCAN_APPLSTOREPATH\fR"
The default setting is to allow the appl full access to its own folder,
but this can be split into a separate store. This will then expand as
\fBARCAN_APPLSTOREPATH/APPLNAME\fR.

.IP "\fBARCAN_STATEBASEPATH\fR"
The default setting is to map this to RESOURCEPATH/savestates and will
then be shared between all appls (which holds true whenever STATEBASE
is set to a subdirectory of RESOURCEPATH).

.IP "\fBARCAN_FONTPATH\fR"
The default setting is to map this to the APPLPATH/fonts with fallback
to RESOURCEPATH/fonts but can be set to some other system font directory
for more fine-grained control (as font-parsing is complex and can be a
source of vulnerabilities).

.IP "\fBARCAN_BINPATH\fR"
The default is to set this to /usr/bin/arcan_frameserver (or wherever
the frameserver is installed, first searching ./ then /usr/local/bin
then /usr/bin).

.IP "\fBARCAN_LIBPATH\fR"
(optional) Used when looking for hijack libraries.
These are libraries that are preloaded or otherwise injected into
specific process in order to infiltrate/exfiltrate/manipulate data
and flow of execution within the process. The most common use for
this is to alter render/audio and input paths in non-compliant
applications. These are used in conjunction with entries in the database.

.IP "\fBARCAN_LOGPATH\fR"
Set to RESOURCEPATH/logs by default (if it exists) and is used for storing
debugging, profiling and similar development/troubleshooting related data.
This includes state dumps which may contain sensitive data.

Some namespaces are also reset when an appl does an explicit switch,
this behavior can be cancelled out by setting ARCAN_XXXPIN for any
namespaces that should explicitly be locked to some path.

.SH FRAMESERVERS
A principal design decision behind Arcan is to split tasks that are
inherently prone to security and stability issues into separate processes
that should be sandboxed to as large a degree as possible with the
principle of least privilege in mind. It should be the active application
(set of user-supplied scripts) that dynamically control the level of
privilege, communication and data storage that such processes have access
to. Processes under such control are referred to as \fIFrameservers\fR to
which there are several archetypes defined. These are as follows:

.IP "\fBNET\fR"
Can be started in either client or server mode and implements a basic
communication, identification and discovery protocol.

.IP "\fBDECODE\fR"
Decode is used to decode audio / video feeds and is expected to be able
to hand seeking commands and can cover multiple user-selectable data streams,
and overlay secondary information e.g. subtitles. It should be able to work
in a container without a working file-system with input provided from passed
handle descriptors but may need access to privileged devices (hardware
assisted decoding).

.IP "\fBRECORD\fR"
Is used to implement audio/video recording or streaming, but also for
related applications that depend on receiving data from the main process.
One such related application is that of remote control (e.g. a VNC/RDP server).

.IP "\fBREMOTING\fR"
This archetype is similar to \fIdecode\fR but prioritizes interactivity
and dynamic change in regards to user input. The default implementation uses
VNC/RDP and as such requires network access.

.IP "\fBGAME\fR"
This archetype represents gaming and the default implementation uses the
libretro interface (which provides games and emulators in the form of
dynamically loadable shared libraries, cores) which has the characteristics
of a high throughput, low-latency, timing sensitive and interactive data source.

.IP "\fBAVFEED\fR"
Avfeed is a special frameserever in the sense that the default implementation
only tests that the interface and control is working. It is primarily used to
swiftly develop and test customized integration with some third party interface.

.IP "\fBTERMINAL\fR"
Used to provide a terminal - a primarily event-driven and text oriented
interface that can be bound to a shell or data pipes and may span multiple
levels of privilege.

For more detailed information on the default implementations of these
archetypes, please refer to their individual manpages as referred to in the
\fISee Also\fR section at the end of this manpage.

All frameservers interact with the main arcan process through the use of
a (BSD licensed) shared memory interface which provides IPC primitives e.g.
event queues and dynamically resizeable buffers for audio and video transfers.

There are two ways frameservers can be activated: authoritative and
non-authoritative (also referred to as \fIexternal\fR).

Authoritative frameservers are spawned by the main arcan process and has
access handles etc. already mapped into the process at launch. These are
sandboxed through the use of a privileged chain-loader that prepares
file-system namespace, activity monitoring and system call filtering.

Non-authoritative frameservers connect through one (or two) environment
variables, ARCAN_CONNPATH and ARCAN_CONNKEY. These need to be explicitly
allocated and activated by the running application for each connection,
see target_alloc in the scripting API for more details.

From a user perspective, this mode can be considered similar to how a
desktop application would connect to an X server through the DISPLAY
environment variable.

.SH LIGHTWEIGHT (LWA) ARCAN

Lightweight arcan is a specialized build of the engine that uses the
frameserver shared memory API as its audio/video display backend. This allows
Arcan to run and control additional instances of itself, with the same or
a different application, thus reusing the engine to fulfill the role of
application framework, rendering engine and display server all rolled into
one.

The lwa build works just the same (although likely with fewer dependencies on
external libraries) as the main version, except the ARCAN_CONNPATH environment
need to be set to a connection point that the arcan instance exposes.

.SH DIAGNOSTICS
There are a number of ways the engine can shut down, especially if the engine
was built in Debug mode. A governing principle for user supplied scripts is
that of \fIFail Often, Early and Hard\fR. This means that API misuse, i.e.
missing or wrong arguments will result in a crash and the related error
description will be provided (color-coded) to the standard output, and that a
state dump will be generated and stored in the namespace specified by
ARCAN_LOGPATH.

This state dump is a Lua parsable script that can be loaded either by a
monitoring script (similar to monitoring mode) or a regular Lua interpreter.

The environment variable \fBARCAN_FRAMESERVER_DEBUGSTALL\fR can be set if you
suspect that a frameserver is involved, or to blame, for an issue. This will
print the process ID (pid) of the new frameserver process to standard output,
then sleep for the argument supplied number of seconds, to provide enough time
to attach a debugger or tracing tool.

.SH HOMEPAGE
https://arcan-fe.com

.SH SEE-ALSO
.IX Header "SEE ALSO"
\&\fIarcan_api_overview\fR\|(3) \&\fIarcan_lwa\fR\|(1) \&\fIarcan_frameserver\fR\|(1)
\&\fIarcan_db\fR\|(1) \&\fIafsrv_game\fR\|(1) \&\fIafsrv_decode\fR\|(1)
\&\fIarcan_encode\fR\|(1) \&\fIafsrv_remoting\fR\|(1)
\&\fIafsrv_net\fR\|(1) \&\fIafsrv_terminal\fR\|(1)

.SH BUGS
You can report bugs through the tracker on the github page. For normal contact
and discussion, see the #arcan IRC channel on freenode. Save a snapshot of
core-dumps (in the case of engine issues) or the appropriate resources/logs
entries. For some issues, a copy of the database used and a list of files
(with permissions) in applpath and resourcepath may also be relevant.

.SH COPYRIGHT
Copyright  ©  2003-2017  Bjorn Stahl. License GPLv2+ or BSD depending on build
configuration. This is free software: you are free  to  change and redistribute
it. There is NO WARRANTY, to the extent permitted by law.

.SH AUTHOR
Bjorn Stahl <contact at arcan-fe dot com>
