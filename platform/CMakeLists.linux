set (PLATFORM_SOURCES
platform/posix/fmt_open.c
platform/posix/glob.c
platform/posix/map_resource.c
platform/posix/resource_io.c
platform/posix/ilaunch.c
platform/posix/strip_traverse.c
platform/posix/paths.c
platform/posix/sem.c
platform/posix/shm.c
platform/posix/time.c
platform/posix/warning.c
platform/sdl/event.c
platform/sdl/video.c
)

set (FSERV_PLATFORM_SOURCES
platform/posix/warning.c
platform/posix/time.c
platform/posix/sem.c
platform/posix/shm.c
platform/sdl/event.c
)

add_definitions(-DPLATFORM_HEADER="platform/posix/platform.h" -Wall -Wno-missing-braces)
add_definitions(-DCLOCK_SOURCE_RAW)
add_definitions(-DLUA_51 -D__UNIX -D_POSIX_C_SOURCE -D_GNU_SOURCE)

find_program(GENERATE_TAGS ctags)

if (GENERATE_TAGS)
	message("--> ctags command found, generating tags output")
	set_source_files_properties( ctags.output PROPERTIES GENERATED true )
	add_custom_command( OUTPUT ctags.output
		COMMAND ctags -R --fields=+iaS --extra=+q -o ctags.output .
		WORKING_DIRECTORY ${CMAKE_SOURCE_DIR} )
	LIST(APPEND SOURCES ctags.output)
endif (GENERATE_TAGS)

LIST(APPEND SOURCES 
	${CMAKE_EXTERNAL_SRCDIR}/hidapi/hid_linux.c
	${CMAKE_EXTERNAL_SRCDIR}/hidapi/hidapi.h
 	arcan_target_launcher.c 
	arcan_frameserver_backend_unix.c
)
LIST(APPEND SOURCES ${PLATFORM_SOURCES})

LIST(APPEND MAIN_LIBRARIES m rt udev) 
LIST(APPEND FSRV_SOURCES frameserver/arcan_frameserver.c ${FSERV_PLATFORM_SOURCES})
LIST(APPEND FSRV_LIBRARIES rt m dl)

add_library(arcan_hijack SHARED 
	arcan_target_unix.c
	arcan_target.c	
	arcan_event.c 
	arcan_frameserver_shmpage.c 
	frameserver/ntsc/snes_ntsc.c
 	frameserver/resampler/resample.c)

set_property(TARGET arcan_hijack PROPERTY 
	COMPILE_DEFINITIONS ENABLE_X11HIJACK ENABLE_WINE_HIJACK)

target_link_libraries(arcan_hijack ${SDL_LIBRARY} ${OPENGL_gl_LIBRARY})

set(BIN_DST ${CMAKE_INSTALL_PREFIX}/bin)
set(THEME_DST ${CMAKE_INSTALL_PREFIX}/share/arcan/themes)
set(RESOURCES_DST ${CMAKE_INSTALL_PREFIX}/share/arcan/resources)

add_executable( arcan ${SOURCES} )
add_executable( arcan_frameserver ${FSRV_SOURCES})

install(TARGETS arcan_hijack DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)

if (${HAVE_64_BIT} AND NOT ${NO_HIJACK32})
	message("(*) 64-bit target detected, building compat. 32-bit hijack library, disable with -DNO_HIJACK32=1")
	add_library(arcan_hijack32 SHARED 
		arcan_target_unix.c 
		arcan_event.c 
		arcan_frameserver_shmpage.c 
		frameserver/ntsc/snes_ntsc.c)
	
	set_target_properties(arcan_hijack32 PROPERTIES COMPILE_FLAGS "-m32")
 	target_link_libraries(arcan_hijack32 -m32 -lrt )
	install(TARGETS arcan_hijack32 DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
endif (${HAVE_64_BIT} AND NOT ${NO_HIJACK32})

install(FILES ${CMAKE_SOURCE_DIR}/arcan_romman.rb DESTINATION ${BIN_DST} PERMISSIONS WORLD_READ WORLD_EXECUTE OWNER_WRITE OWNER_READ OWNER_EXECUTE GROUP_READ GROUP_EXECUTE)
install(FILES ${CMAKE_SOURCE_DIR}/doc/arcan.1 DESTINATION /usr/local/share/man/man1)

if (EXISTS "/usr/bin/dpkg")
	execute_process(COMMAND "dpkg" "--print-architecture" OUTPUT_VARIABLE DPKGARCH)
	string(REPLACE "\n" "" DPKGARCH "${DPKGARCH}")
	set(CPACK_SYSTEM_NAME ${DPKGARCH})
	set(CPACK_DEBIAN_PACKAGE_NAME ${CPACK_PACKAGE_NAME})
	set(CPACK_DEBIAN_PACKAGE_VERSION ${VERSION})
	set(CPACK_DEBIAN_PACKAGE_MAINTAINER "Bjorn Stahl")
	set(CPACK_DEBIAN_PACKAGE_DEPENDS "libc6 (>= 2.4), libglu1-mesa | libglu1, liblua5.1-0, libopenal1, libsdl-image1.2 (>= 1.2.10), libsdl-ttf2.0-0, libsdl1.2debian (>= 1.2.10-1), libsqlite3-0 (>= 3.6.0), libusb-1.0-0 (>= 2:1.0.8), libavcodec54 (>= 8:1.0.0), libavformat54 (>= 8:1.0-0), libavutil51 (>= 8:1.0.0, libswscale2 (>= 8:1.0.0), libavdevice54 (>= 8:1.0-0), libswresample0 (>= 8:1.0.0), libbz2-1.0, x264, librtmp0, ruby1.9.1, libsqlite3-ruby1.9.1, libnokogiri-ruby1.9.1, librmagick-ruby")

endif(EXISTS "/usr/bin/dpkg")

set(CPACK_SOURCE_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-dev_${VERSION}_${CPACK_SYSTEM_NAME}")
set(CPACK_SOURCE_IGNORE_FILES "/\\\\.git/;\\\\.#.*;#.*#;.*~;CMakeFiles;_CPack_Packages;.*\\\\.cmake;install_manifest.txt;CMakeCache.txt;${CMAKE_PACKAGE_NAME}.*\\\\.(tar\\\\.gz|tar\\\\.bz2|deb);Makefile;")

