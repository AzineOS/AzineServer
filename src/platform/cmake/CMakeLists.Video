#
# Expects:
#  VIDEO_PLATFORM (or FATAL)
#  PLATFORM_ROOT
#
# Defines:
#  INPUT_PLATFORM - Video/Input are rather tightly connected
#  HEADLESS_PLATFORM
#  HEADLESS_SOURCES - additional symbols #include HEADLESS_PLATFORM might need
#  HEADLESS_LIBRARIES
#  VIDEO_LIBRARIES
#
# Modifies:
#  INCLUDE_DIRS
#

if (VIDEO_PLATFORM STREQUAL "x11" OR VIDEO_PLATFORM STREQUAL "x11-headless")
	if (NOT INPUT_PLATFORM)
		set(INPUT_PLATFORM "x11")
	endif()

	add_definitions(-DWITH_X11)

	if (VIDEO_PLATFORM STREQUAL "x11-headless")
		set(VIDEO_PLATFORM "x11")
		add_definitions(-DWITH_HEADLESS_MAIN)
	endif()

	find_package(X11 REQUIRED QUIET)

	list(APPEND INCLUDE_DIRS
		${X11_INCLUDE_DIRS}
		${CMAKE_CURRENT_SOURCE_DIR}/frameserver
	)

	list(APPEND VIDEO_LIBRARIES ${X11_LIBRARIES})
	list(APPEND HEADLESS_LIBRARIES ${X11_LIBRARIES})

	set(LWA_PLATFORM_STR "x11-headless")
	set(HEADLESS_PLATFORM ${PLATFORM_ROOT}/x11/video.c)
	set(VIDEO_PLATFORM_SOURCES ${PLATFORM_ROOT}/x11/video.c)

# legacy platform for weaker platforms that don't have/support KMS
elseif(VIDEO_PLATFORM STREQUAL "egl-gles")
	if (NOT INPUT_PLATFORM)
		set(INPUT_PLATFORM "linux")
	endif()

	find_package(EGL REQUIRED QUIET)
	set(HEADLESS_PLATFORM ${PLATFORM_ROOT}/egl-gles/video.c)

	if (GLES2_BCM_IMPLEMENTATION)
		message("broadcom (BCM) GLES implementation found, set BCM_ROOT to bad dir to disable")
		list(APPEND ARCAN_DEFINITIONS WITH_BCM)
		set_property(SOURCE ${CMAKE_CURRENT_SOURCE_DIR}/platform/egl-gles/video.c
			APPEND PROPERTY COMPILE_FLAGS -fgnu89-inline)
		set(LWA_PLATFORM_STR "broken")
	endif()

	list(APPEND INCLUDE_DIRS
		${GLES2_INCLUDE_DIRS}
		${EGL_INCLUDE_DIRS}
	)

	set(VIDEO_PLATFORM_SOURCES ${PLATFORM_ROOT}/egl-gles/video.c)
	list(APPEND VIDEO_LIBRARIES ${EGL_LIBRARIES})

#
# NVidia EGLStreams version of egl-dri, needs to be built without GBM
#
elseif(VIDEO_PLATFORM STREQUAL "egl-dri-nvidia")
	if (NOT INPUT_PLATFORM)
		set(INPUT_PLATFORM "linux")
	endif()

	find_package(EGL REQUIRED QUIET)
	set(IGNORE_GBM true)
	find_package(GBMKMS REQUIRED QUIET)

	set_property(SOURCE ${CMAKE_CURRENT_SOURCE_DIR}/platform/egl-dri/video.c
		APPEND PROPERTY COMPILE_DEFINITIONS EGL_STREAMS)

	list(APPEND INCLUDE_DIRS ${GBMKMS_INCLUDE_DIRS})
	list(APPEND VIDEO_LIBRARIES ${EGL_LIBRARIES} ${GBMKMS_LIBRARIES})
	list(APPEND HEADLESS_LIBRARIES ${EGL_LIBRARIES})
	list(APPEND HEADLESS_PLATFORM ${PLATFORM_ROOT}/egl-dri/stream_headless.c)
	set(VIDEO_PLATFORM_SOURCES ${PLATFORM_ROOT}/egl-dri/video.c)
	set(LWA_PLATFORM_STR "broken")
#
# will hopefully become the default on BSDs/linux
#
elseif(VIDEO_PLATFORM STREQUAL "egl-dri")
	if (NOT INPUT_PLATFORM)
		set(INPUT_PLATFORM "linux")
	endif()

	find_package(EGL REQUIRED QUIET)
	find_package(GBMKMS REQUIRED QUIET)

	list(APPEND VIDEO_LIBRARIES
		${EGL_LIBRARIES}
		${GBMKMS_LIBRARIES}
	)
	list(APPEND HEADLESS_LIBRARIES
		${EGL_LIBRARIES}
		${GBMKMS_LIBRARIES}
	)
	list(APPEND INCLUDE_DIRS ${GBMKMS_INCLUDE_DIRS})
	set(VIDEO_PLATFORM_SOURCES ${PLATFORM_ROOT}/egl-dri/video.c)
	set(HEADLESS_PLATFORM ${PLATFORM_ROOT}/egl-dri/video_rnode.c)
	set(LWA_PLATFORM_STR "dri-rnodes")

#
# only option on OSX/Windows currently, would also work for
# drawing to Wayland compositors (though the list of dependencies
# becomes rather nasty).
#
elseif (VIDEO_PLATFORM STREQUAL "sdl")
	if (NOT INPUT_PLATFORM)
		set(INPUT_PLATFORM "sdl")
	endif()

	find_package(SDL REQUIRED QUIET)

	list(APPEND INCLUDE_DIRS ${SDL_INCLUDE_DIR})
	list(APPEND VIDEO_LIBRARIES ${SDL_LIBRARY})
	set(VIDEO_PLATFORM_SOURCES ${PLATFORM_ROOT}/sdl/video.c)

# headless with SDL requires OS specific hacks
	set(LWA_PLATFORM_STR "x11-headless")
	if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
		set(LWA_PLATFORM_STR "darwin")
		set(HEADLESS_PLATFORM ${PLATFORM_ROOT}/darwin/video.c)
	elseif(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
		set(LWA_PLATFORM_STR "not found")
	else()
		FIND_PACKAGE(X11 REQUIRED QUIET)
		set(HEADLESS_PLATFORM ${PLATFORM_ROOT}/x11/video.c)
		set(HEADLESS_LIBRARIES ${X11_LIBRARIES})
		list(APPEND INCLUDE_DIRS ${X11_INCLUDE_DIRS})
		set(LWA_PLATFORM_STR "x11-headless")
	endif()

else()
# there are a few things that is just <invective> when it comes
# to CMake (outside the syntax itself and that it took 10+ years
# to get to a point where you can split strings across lines),
# one is why in the name of everything holy is a logging function
# the only way to do an exit? without the ability to reset a return value.
# That is just <series of invectives>. In addition, it seems
# impossible to not have it spew user-unfriendly garbage that hides
# the CLEAR AND OBVIOUS message you want to convey. Thanks.
	message(FATAL_ERROR
"${CLB_WHT}No video platform defined${CLB_RST}, see -DVIDEO_PLATFORM=xx above${CL_RST}.")
endif()
