#
# Expects:
#  HEADLESS_PLATFORM (or FATAL)
#  PLATFORM_ROOT
#
# Defines:
#  arcan_lwa (new target executable)

# Lightweight arcan is a regular arcan build where we configure an
# audio/video/input platform that uses arcan-shmif rather than the
# regular platform configuration.
#
# To achieve this, we need special handling for audio, which is
# currently done by making a separate openal build where we patch
# in the code needed for this.
#
SET (ALPATCHES
	${CMAKE_CURRENT_SOURCE_DIR}/external/patches/openal/0001-adding-arcan-shmif-support.patch
	${CMAKE_CURRENT_SOURCE_DIR}/external/patches/openal/0002-arcan-shmif-backend-working.patch
)

#
# Note the || echo "" on the PATCH_COMMAND line, it was added to have
# cmake IGNORE the return status of the git am command as when the patches
# have been applied the first time, they are erroneously added AGAIN IF you
# do a make clean && make.
#
ExternalProject_Add(openal_soft
	SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/openal_soft
	GIT_REPOSITORY "${GIT_MIRROR}/openal-soft.git"
	UPDATE_COMMAND ""
	PATCH_COMMAND ${EXEC} git am -q ${ALPATCHES} || true
	INSTALL_COMMAND ""
	CMAKE_ARGS
		-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
		-DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR}
		-DALSOFT_BACKEND_ALSA=OFF
		-DALSOFT_BACKEND_OSS=OFF
		-DALSOFT_BACKEND_PULSEAUDIO=OFF
		-DALSOFT_BACKEND_PORTAUDIO=OFF
		-DALSOFT_BACKEND_WAVE=OFF
		-DALSOFT_MIDI_FLUIDSYNTH=OFF
		-DALSOFT_BACKEND_ARCAN=ON
		-DALSOFT_REQUIRE_ARCAN=ON
		-DALSOFT_EXAMPLES=OFF
		-DALSOFT_DLOPEN=OFF
		-DALSOFT_UTILS=OFF
		-DALSOFT_CONFIG=OFF
	 	-DLIBTYPE=STATIC
		-DARCAN_SHMIF_PATH=${CMAKE_CURRENT_SOURCE_DIR}/shmif
		-DARCAN_SHMIF_PLATFORM=${FSRV_PLATFORM_SOURCES}
		-DARCAN_SHMIF_PLATFORM_HEADER=${PLATFORM_ROOT}/platform.h
)

set(LWA_LIBRARIES
# is there a prettier way for specifying this?
	${CMAKE_CURRENT_BINARY_DIR}/openal_soft-prefix/src/openal_soft-build/libcommon.a
	${CMAKE_CURRENT_BINARY_DIR}/openal_soft-prefix/src/openal_soft-build/libopenal.a
)

add_executable(arcan_lwa
	${SOURCES}
	${AGP_SOURCES}
	${LWA_PLATFORM}
	${PLATFORM_ROOT}/arcan/video.c
	${HEADLESS_SOURCES}
)

target_compile_definitions(arcan_lwa PRIVATE
	ARCAN_LWA
	${ARCAN_DEFINITIONS}
	WITH_HEADLESS_MAIN
	HEADLESS_PLATFORM=\"${HEADLESS_PLATFORM}\"
)

add_dependencies(arcan_lwa openal_soft)

target_include_directories(arcan_lwa PRIVATE ${INCLUDE_DIRS})
target_link_libraries(arcan_lwa
	${STDLIB}
	${ARCAN_LIBRARIES}
	${AGP_LIBRARIES}
	${LWA_LIBRARIES}
	${HEADLESS_LIBRARIES}
)
