Windows Build- Specific Instructions

This platform is, true to form, more of a mess than the others
combined.

Features Currently Lacking:
 - Non-authoritative Connections
       - Currently, there's no way for a shmif- program
         to find a connection to the main process.
         One possible approach would be simply looking for
         the running process, SendMessage with the intended
         key and from there do the Handle- transfer and mapping

 - Dynamic shared memory segments
       - Similarly to the OS X platform, we overcommit on the
         size of the shared memory segment to a possible max
         Due to the problems in resizing an already mapped segment.

 - Hijacking
       - Different interpositioning mechanisms need to be
         used and there's more incentive to support rather different
         underlying data sources (e.g. direct3D) there are lots
         of projects on GitHub that has done this, but we've lacked
         time / incentive.

 - LWA Builds
       - LWA needs non-authoritative connections

 - Multiple Segments
       - The windows platform doesn't yet implement the necessary
         functions for this to work, this is a more simple porting
         job.

 - Splitmode
       - The chainloader has not been implemented, partly because
         the mechanisms it is intended to be used for (sandboxing
         etc.) is further away on this platform than the others.

 - Monitoring Mode
       - Current implementation relies on being able to fork() and
         execute in a slighly modified environment. This needs a
         different approach on windows.

 - 64- bit builds
       - The engine has been 32- 64- bit stable on other platforms
         and architectures (Aarch64, amd64, ...) but the builds here
         has problems, might stem from third party dependencies.

Building:
 - First you need the big batch of dll hell libraries,
   check the CMakeLists.txt file for the WIN32 section to see exactly
   which ones or possibly grab a previous binary release and go with
   those. By default, they are expected to be in data/distr/win32libs

   But the path can be overridden with ${WINDISTR}, then do the same
   with the includes (${WINDISTR}/include).

 - Some libraries, GLEW, APR and LIBPNG need to be linked statically
   Glew has a binary distribution with a gllew32s.lib
   But libapr and libpng need to be downloaded and built separately.
