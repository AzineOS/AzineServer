From c235dc937955172eae3cc59e2958856a033b2c1f Mon Sep 17 00:00:00 2001
From: bjornstahl <arcan-fe@nospam>
Date: Sun, 6 Jul 2014 20:58:12 +0200
Subject: [PATCH] adding arcan shmif support

---
 Alc/ALc.c                 |   4 +-
 Alc/backends/arcan.c      | 275 ++++++++++++++++++++++++++++++++++++++++++++++
 Alc/backends/base.h       |   1 +
 CMakeLists.txt            |  17 +++
 OpenAL32/Include/alMain.h |   2 +
 config.h.in               |   3 +
 6 files changed, 301 insertions(+), 1 deletion(-)
 create mode 100644 Alc/backends/arcan.c

diff --git a/Alc/ALc.c b/Alc/ALc.c
index 1690c9f..88d2312 100644
--- a/Alc/ALc.c
+++ b/Alc/ALc.c
@@ -101,7 +101,9 @@ static struct BackendInfo BackendList[] = {
 #ifdef HAVE_OPENSL
     { "opensl", NULL, alc_opensl_init, alc_opensl_deinit, alc_opensl_probe, EmptyFuncs },
 #endif
-
+#ifdef HAVE_ARCAN
+    { "arcan", ALCarcanBackendFactory_getFactory, NULL, NULL, NULL, EmptyFuncs },
+#endif
     { "null", ALCnullBackendFactory_getFactory, NULL, NULL, NULL, EmptyFuncs },
 #ifdef HAVE_WAVE
     { "wave", ALCwaveBackendFactory_getFactory, NULL, NULL, NULL, EmptyFuncs },
diff --git a/Alc/backends/arcan.c b/Alc/backends/arcan.c
new file mode 100644
index 0000000..444d094
--- /dev/null
+++ b/Alc/backends/arcan.c
@@ -0,0 +1,275 @@
+/**
+ * OpenAL cross platform audio library
+ * Copyright (C) 2010 by Chris Robinson
+ * This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Library General Public
+ *  License as published by the Free Software Foundation; either
+ *  version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ *  License along with this library; if not, write to the
+ *  Free Software Foundation, Inc.,
+ *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ * Or go to http://www.gnu.org/copyleft/lgpl.html
+ */
+
+#include "config.h"
+
+#include <stdlib.h>
+#ifdef HAVE_WINDOWS_H
+#include <windows.h>
+#endif
+
+#ifndef PLATFORM_HEADER
+#define PLATFORM_HEADER "../../../platform/platform.h"
+#endif
+
+#include <arcan_shmif.h>
+#include "alMain.h"
+#include "alu.h"
+#include "threads.h"
+#include "compat.h"
+
+#include "backends/base.h"
+
+typedef struct ALCarcanBackend {
+    DERIVE_FROM_TYPE(ALCbackend);
+
+    volatile int killNow;
+    althrd_t thread;
+} ALCarcanBackend;
+
+static int ALCarcanBackend_mixerProc(void *ptr);
+
+static void ALCarcanBackend_Construct(ALCarcanBackend *self, ALCdevice *device);
+static DECLARE_FORWARD(ALCarcanBackend, ALCbackend, void, Destruct)
+static ALCenum ALCarcanBackend_open(ALCarcanBackend *self, const ALCchar *name);
+static void ALCarcanBackend_close(ALCarcanBackend *self);
+static ALCboolean ALCarcanBackend_reset(ALCarcanBackend *self);
+static ALCboolean ALCarcanBackend_start(ALCarcanBackend *self);
+static void ALCarcanBackend_stop(ALCarcanBackend *self);
+static DECLARE_FORWARD2(ALCarcanBackend, ALCbackend, ALCenum, captureSamples, void*, ALCuint)
+static DECLARE_FORWARD(ALCarcanBackend, ALCbackend, ALCuint, availableSamples)
+static DECLARE_FORWARD(ALCarcanBackend, ALCbackend, ClockLatency, getClockLatency)
+static DECLARE_FORWARD(ALCarcanBackend, ALCbackend, void, lock)
+static DECLARE_FORWARD(ALCarcanBackend, ALCbackend, void, unlock)
+DECLARE_DEFAULT_ALLOCATORS(ALCarcanBackend)
+
+DEFINE_ALCBACKEND_VTABLE(ALCarcanBackend);
+
+
+static const ALCchar arcanDevice[] = "arcan";
+
+
+static void ALCarcanBackend_Construct(ALCarcanBackend *self, ALCdevice *device)
+{
+    ALCbackend_Construct(STATIC_CAST(ALCbackend, self), device);
+    SET_VTABLE2(ALCarcanBackend, ALCbackend, self);
+}
+
+
+static int ALCarcanBackend_mixerProc(void *ptr)
+{
+    ALCarcanBackend *self = (ALCarcanBackend*)ptr;
+    ALCdevice *device = STATIC_CAST(ALCbackend, self)->mDevice;
+    struct timespec now, start;
+    ALuint64 avail, done;
+    const long restTime = (long)((ALuint64)device->UpdateSize * 1000000000 /
+                                 device->Frequency / 2);
+
+    struct arcan_shmif_cont* acon = arcan_shmif_primary(SHMIF_INPUT);
+    if (!acon)
+        return 1;
+
+    SetRTPriority();
+    althrd_setname(althrd_current(), MIXER_THREAD_NAME);
+
+    done = 0;
+    if(altimespec_get(&start, AL_TIME_UTC) != AL_TIME_UTC)
+    {
+        ERR("Failed to get starting time\n");
+        return 1;
+    }
+
+    if (!arcan_shmif_lock(acon)){
+        ERR("Failed to retrieve lock\n");
+        return 1;
+    }
+/* this is slightly dangerous as there might be a race with the video subsystem,
+ * though practically we can still get away with it due to the layout of shmif */
+    size_t frame_sz = FrameSizeFromDevFmt(device->FmtChans, device->FmtType);
+    if (frame_sz * device->UpdateSize != acon->abufsize){
+        arcan_shmif_resize_ext(acon, acon->w, acon->h,
+            (struct shmif_resize_ext){
+            .abuf_sz = frame_sz * device->UpdateSize, .abuf_cnt = 4
+        });
+    }
+    arcan_shmif_unlock(acon);
+
+    if (frame_sz * device->UpdateSize > acon->abufsize){
+        ERR("Alsa/arcan - couldn't negotiate the desired buffer size");
+        return 1;
+    }
+
+/* it's not entirely safe to do this here */
+    while(!self->killNow && device->Connected)
+    {
+        if(altimespec_get(&now, AL_TIME_UTC) != AL_TIME_UTC)
+        {
+            ERR("Failed to get current time\n");
+            return 1;
+        }
+
+        avail  = (now.tv_sec - start.tv_sec) * device->Frequency;
+        avail += (ALint64)(now.tv_nsec - start.tv_nsec) * device->Frequency / 1000000000;
+        if(avail < done)
+        {
+            /* Oops, time skipped backwards. reset the number of samples done
+             * with one update available since we (likely) just came back from
+             * sleeping. */
+            done = avail - device->UpdateSize;
+        }
+
+        if(avail-done < device->UpdateSize)
+            al_nssleep(restTime);
+        else while(avail-done >= device->UpdateSize)
+        {
+            aluMixData(device, acon->audb, device->UpdateSize);
+            acon->abufused += device->UpdateSize * frame_sz;
+            done += device->UpdateSize;
+            if (arcan_shmif_lock(acon)){
+                arcan_shmif_signal(acon, SHMIF_SIGAUD);
+                arcan_shmif_unlock(acon);
+            }
+            else
+                acon->abufused = 0;
+        }
+    }
+
+    return 0;
+}
+
+
+static ALCenum ALCarcanBackend_open(ALCarcanBackend *self, const ALCchar *name)
+{
+    ALCdevice *device;
+
+    if(!name)
+        name = arcanDevice;
+    else if(strcmp(name, arcanDevice) != 0)
+        return ALC_INVALID_VALUE;
+
+    device = STATIC_CAST(ALCbackend, self)->mDevice;
+    al_string_copy_cstr(&device->DeviceName, name);
+
+    return ALC_NO_ERROR;
+}
+
+static void ALCarcanBackend_close(ALCarcanBackend* UNUSED(self))
+{
+}
+
+static ALCboolean ALCarcanBackend_reset(ALCarcanBackend *self)
+{
+    ALCdevice *dev = STATIC_CAST(ALCbackend, self)->mDevice;
+    struct arcan_shmif_cont* cont = arcan_shmif_primary(SHMIF_INPUT);
+    if (!cont)
+        return ALC_FALSE;
+
+    dev->FmtChans = ALC_STEREO_SOFT;
+    dev->FmtType = ALC_SHORT_SOFT;
+    dev->Frequency = ARCAN_SHMIF_SAMPLERATE;
+
+    cont->abufpos = 0;
+    arcan_shmif_enqueue(cont, &(struct arcan_event){
+        .ext.kind = ARCAN_EVENT(FLUSHAUD)
+    });
+
+    SetDefaultWFXChannelOrder(dev);
+
+    return ALC_TRUE;
+}
+
+static ALCboolean ALCarcanBackend_start(ALCarcanBackend *self)
+{
+    self->killNow = 0;
+    if(althrd_create(&self->thread, ALCarcanBackend_mixerProc, self) != althrd_success)
+        return ALC_FALSE;
+    return ALC_TRUE;
+}
+
+static void ALCarcanBackend_stop(ALCarcanBackend *self)
+{
+    int res;
+
+    if(self->killNow)
+        return;
+
+    self->killNow = 1;
+    althrd_join(self->thread, &res);
+}
+
+
+typedef struct ALCarcanBackendFactory {
+    DERIVE_FROM_TYPE(ALCbackendFactory);
+} ALCarcanBackendFactory;
+#define ALCARCANBACKENDFACTORY_INITIALIZER { { GET_VTABLE2(ALCarcanBackendFactory, ALCbackendFactory) } }
+
+ALCbackendFactory *ALCarcanBackendFactory_getFactory(void);
+
+static ALCboolean ALCarcanBackendFactory_init(ALCarcanBackendFactory *self);
+static DECLARE_FORWARD(ALCarcanBackendFactory, ALCbackendFactory, void, deinit)
+static ALCboolean ALCarcanBackendFactory_querySupport(ALCarcanBackendFactory *self, ALCbackend_Type type);
+static void ALCarcanBackendFactory_probe(ALCarcanBackendFactory *self, enum DevProbe type);
+static ALCbackend* ALCarcanBackendFactory_createBackend(ALCarcanBackendFactory *self, ALCdevice *device, ALCbackend_Type type);
+DEFINE_ALCBACKENDFACTORY_VTABLE(ALCarcanBackendFactory);
+
+
+ALCbackendFactory *ALCarcanBackendFactory_getFactory(void)
+{
+    static ALCarcanBackendFactory factory = ALCARCANBACKENDFACTORY_INITIALIZER;
+    return STATIC_CAST(ALCbackendFactory, &factory);
+}
+
+
+static ALCboolean ALCarcanBackendFactory_init(ALCarcanBackendFactory* UNUSED(self))
+{
+    return ALC_TRUE;
+}
+
+static ALCboolean ALCarcanBackendFactory_querySupport(ALCarcanBackendFactory* UNUSED(self), ALCbackend_Type type)
+{
+    if(type == ALCbackend_Playback)
+        return ALC_TRUE;
+    return ALC_FALSE;
+}
+
+static void ALCarcanBackendFactory_probe(ALCarcanBackendFactory* UNUSED(self), enum DevProbe type)
+{
+    switch(type)
+    {
+        case ALL_DEVICE_PROBE:
+            AppendAllDevicesList(arcanDevice);
+            break;
+        case CAPTURE_DEVICE_PROBE:
+            break;
+    }
+}
+
+static ALCbackend* ALCarcanBackendFactory_createBackend(ALCarcanBackendFactory* UNUSED(self), ALCdevice *device, ALCbackend_Type type)
+{
+    if(type == ALCbackend_Playback)
+    {
+        ALCarcanBackend *backend;
+        NEW_OBJ(backend, ALCarcanBackend)(device);
+        if(!backend) return NULL;
+        return STATIC_CAST(ALCbackend, backend);
+    }
+
+    return NULL;
+}
diff --git a/Alc/backends/base.h b/Alc/backends/base.h
index 9417740..7c47705 100644
--- a/Alc/backends/base.h
+++ b/Alc/backends/base.h
@@ -148,6 +148,7 @@ ALCbackendFactory *ALCportBackendFactory_getFactory(void);
 ALCbackendFactory *ALCnullBackendFactory_getFactory(void);
 ALCbackendFactory *ALCwaveBackendFactory_getFactory(void);
 ALCbackendFactory *ALCloopbackFactory_getFactory(void);
+ALCbackendFactory *ALCarcanBackendFactory_getFactory(void);
 
 ALCbackend *create_backend_wrapper(ALCdevice *device, const BackendFuncs *funcs, ALCbackend_Type type);
 
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 839bf18..6463bbc 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -719,6 +719,7 @@ SET(HAVE_PULSEAUDIO 0)
 SET(HAVE_COREAUDIO  0)
 SET(HAVE_OPENSL     0)
 SET(HAVE_WAVE       0)
+SET(HAVE_ARCAN      0)
 
 # Check for SSE support
 OPTION(ALSOFT_REQUIRE_SSE "Require SSE support" OFF)
@@ -1106,6 +1107,22 @@ IF(ALSOFT_BACKEND_WAVE)
     SET(BACKENDS  "${BACKENDS} WaveFile,")
 ENDIF()
 
+OPTION(ALSOFT_REQUIRE_ARCAN "Require ARCAN backend" OFF)
+
+IF(ALSOFT_REQUIRE_ARCAN)
+	SET(HAVE_ARCAN 1)
+	SET(BACKENDS "${BACKENDS} Arcan,")
+#	FILE(GLOB ARCAN_SHMIF_FILES ${ARCAN_SHMIF_PATH}/*)
+
+	SET(ALC_OBJS ${ALC_OBJS}
+		Alc/backends/arcan.c
+		${ARCAN_SHMIF_PLATFORM})
+
+	LIST(APPEND ALC_OBJS ${ARCAN_SHMIF_FILES})
+    ADD_DEFINITIONS(-DPLATFORM_HEADER=\"${ARCAN_SHMIF_PLATFORM_HEADER}\")
+	INCLUDE_DIRECTORIES(${ARCAN_SHMIF_PATH})
+ENDIF()
+
 # This is always available
 SET(BACKENDS  "${BACKENDS} Null")
 
diff --git a/OpenAL32/Include/alMain.h b/OpenAL32/Include/alMain.h
index 5a5c392..c81be42 100644
--- a/OpenAL32/Include/alMain.h
+++ b/OpenAL32/Include/alMain.h
@@ -410,6 +410,8 @@ void alc_opensl_probe(enum DevProbe type);
 ALCboolean alc_qsa_init(BackendFuncs *func_list);
 void alc_qsa_deinit(void);
 void alc_qsa_probe(enum DevProbe type);
+ALCboolean alc_arcan_init(BackendFuncs *func_list);
+void alc_arcan_probe(enum DevProbe type);
 
 struct ALCbackend;
 
diff --git a/config.h.in b/config.h.in
index 4f22e5c..b78ad30 100644
--- a/config.h.in
+++ b/config.h.in
@@ -35,6 +35,9 @@
 /* Define if we have the OSS backend */
 #cmakedefine HAVE_OSS
 
+/* Define if we have the ARCAN backend */
+#cmakedefine HAVE_ARCAN
+
 /* Define if we have the Solaris backend */
 #cmakedefine HAVE_SOLARIS
 
-- 
2.7.4

